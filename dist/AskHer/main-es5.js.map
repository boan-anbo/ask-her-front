{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth-guard.service.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/back/back.component.html","webpack:///src/app/back/back.component.ts","webpack:///src/app/data.service.ts","webpack:///src/app/main/entry.model.ts","webpack:///src/app/main/main.component.html","webpack:///src/app/main/main.component.ts","webpack:///src/app/speech.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AuthGuard","authService","router","dataService","next","state","console","log","checkAuth","params","pipe","data","AuthService","isAuthenticated","isAuth","providedIn","BackComponent","snackbar","loadAllUploadedAnswers","allUploadedAnswers","getAllUpload","subscribe","item","approveUploadedAnswer","_id","open","answer","message","duration","window","confirm","deleteUploadedAnswer","DataService","http","_apiBase","_listAllUpload","_deleteUploadedAnswer","_approveUploadedAnswer","_backEntry","_listAllEntries","_getRandomEntry","_uploadAnswer","_upvoteAnswer","_upvoteQuestion","answerId","questionId","get","authorId","put","uploadQuestionUrl","UpVoteAnswerUrl","UpvoteQuestionUrl","Entry","question","text","heard","answers","Answer","Question","upvote","UploadAnswer","EntryCollection","MainComponent","fb","speechService","currentEntry","answerPointer","writingAnswer","inputSubmitLoading","alreadyHeard","alreadyUpvoted","loadingEntry","preLoadQuestionSubject","LoadRandomQuestion","InitializeQuestion","InitializeInputForm","unsubscribe","formValue","inputForm","value","uploadAnswerSubscription","uploadAnswer","ExitWritingMode","err","entryToUse","iHeardThatSubscription","UpvoteQuestion","length","ResetAnswerPointer","InitializeAnswerUpvote","group","toString","upvoteSubscription","UpvoteAnswer","newAnswer","unshift","ResetButtons","setCurrentEntry","preLoadedEntry","cancelSpeech","loadingSubscription","getOneRandomEntry","entry","Object","assign","sayQuestion","preloadingSubscription","IHeardThat","NextQuestion","LetMeAnswer","SpeechService","utterance","utteranceInstance","SpeechSynthesisUtterance","lang","rate","speechSynthesis","speak","cancel","environment","production","bootstrapModule","catch","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {BackComponent} from './back/back.component';\nimport {MainComponent} from './main/main.component';\nimport {AuthGuard} from './auth/auth-guard.service';\n\n\nconst routes: Routes = [\n  { path: ':id/back', component: BackComponent, canActivate: [AuthGuard] },\n  { path: '', component: MainComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'AskHer';\n}\n","<router-outlet></router-outlet>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { BackComponent } from './back/back.component';\nimport {AppRoutingModule} from './app-routing.module';\nimport {MainComponent} from './main/main.component';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatListModule} from '@angular/material/list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {RecaptchaModule} from 'ng-recaptcha';\nimport {HttpClientModule} from '@angular/common/http';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {AuthGuard} from './auth/auth-guard.service';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BackComponent,\n    MainComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    MatGridListModule,\n    MatCardModule,\n    MatButtonModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    RecaptchaModule,\n    MatExpansionModule,\n  ],\n  providers: [AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport {DataService} from '../data.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router, private dataService: DataService) {\r\n\r\n  }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> {\r\n    console.log(state)\r\n    console.log(next)\r\n    return this.dataService.checkAuth(next.params?.id).pipe(\r\n      map(data => {\r\n        console.log(data)\r\n        if (data === false) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      })\r\n    )\r\n    // if (this.authService.isRouteAuthenticated()) {\r\n    //   console.log(state.toString());\r\n    //   // return true;\r\n    // }\r\n    // this.router.navigate['back'];\r\n    // return false;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {DataService} from '../data.service';\n\n@Injectable(\n  {\n  providedIn: 'root'\n  }\n)\nexport class AuthService {\n\n  private isAuthenticated: boolean;\n  constructor(private dataService: DataService\n  ) { }\n\n  public isRouteAuthenticated(): boolean {\n    return this.isAuthenticated;\n  }\n\n  public setIsAuthenticated(isAuth: boolean): void {\n    this.isAuthenticated = isAuth;\n  }\n\n}\n","<mat-list dense>\n  <mat-list-item *ngIf=\"this.allUploadedAnswers?.length === 0 || !this.allUploadedAnswers\">\n    <h3>目前没有新的回答需要审核</h3>\n  </mat-list-item>\n  <mat-list-item *ngFor=\"let item of this.allUploadedAnswers\">\n    <p>\n    {{item.answer?.message}}\n    </p>\n\n    <button mat-icon-button id=\"approve\">\n      <mat-icon (click)=\"this.approveUploadedAnswer(item)\">check</mat-icon>\n    </button>\n    <button mat-icon-button id=\"delete\">\n      <mat-icon (click)=\"this.deleteUploadedAnswer(item)\">delete</mat-icon>\n    </button>\n\n  </mat-list-item>\n</mat-list>\n","import { Component, OnInit } from '@angular/core';\nimport {DataService} from '../data.service';\nimport {UploadAnswer} from '../main/entry.model';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {AuthService} from '../auth/auth.service';\n\n\n@Component({\n  selector: 'app-back',\n  templateUrl: './back.component.html',\n  styleUrls: ['./back.component.css']\n})\nexport class BackComponent implements OnInit {\n  public allUploadedAnswers;\n\n  constructor(private dataService: DataService, private snackbar: MatSnackBar, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.loadAllUploadedAnswers();\n    console.log(this.allUploadedAnswers);\n  }\n\n  async loadAllUploadedAnswers() {\n    this.dataService.getAllUpload().subscribe((data) => {\n      console.log(data)\n      this.allUploadedAnswers = data;\n    });\n  }\n\n  async approveUploadedAnswer(item: UploadAnswer) {\n    this.dataService.approveUploadedAnswer(item._id).subscribe((data) => {\n      console.log(data);\n      this.loadAllUploadedAnswers();\n      this.snackbar.open(`Answer Approved: ${item.answer?.message}`, '', {duration: 2000});\n\n    });\n  }\n\n\n  async deleteUploadedAnswer(item: UploadAnswer) {\n      if (window.confirm(`确定要删除吗（可按回车键确认）?\\n ${item.answer?.message}`)) {\n        this.dataService.deleteUploadedAnswer(item._id).subscribe((data) => {\n          console.log(data);\n          this.loadAllUploadedAnswers();\n        });\n        this.snackbar.open(`Answer Deleted: ${item.answer?.message}`, 'OK', {duration: 2000});\n      }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) { }\n\n  // tslint:disable-next-line:variable-name\n  private _apiBase = 'http://167.172.212.141:4001'; // remote\n  // private _apiBase = 'https://www.askjiang.com'; // remote\n  // private _apiBase = 'http://localhost:4001'; // local\n  // tslint:disable-next-line:variable-name\n  private _listAllUpload = '/uploadanswer/listall';\n  // tslint:disable-next-line:variable-name\n  private _deleteUploadedAnswer = '/uploadanswer/delete/'\n  // tslint:disable-next-line:variable-name\n  private _approveUploadedAnswer = '/uploadanswer/approve/'\n  // tslint:disable-next-line:variable-name\n  private _backEntry = '/entry/back/'\n  // tslint:disable-next-line:variable-name\n  private _listAllEntries = '/entry/listall'\n  // tslint:disable-next-line:variable-name\n  private _getRandomEntry = '/entry/find/random'\n  // tslint:disable-next-line:variable-name\n  private _uploadAnswer = '/uploadanswer/'\n  // tslint:disable-next-line:variable-name\n  private _upvoteAnswer = '/upvote/answer/'\n  // tslint:disable-next-line:variable-name\n  private _upvoteQuestion = '/upvote/question/'\n\n  private UpVoteAnswerUrl(answerId: string): string {\n    return this._apiBase + this._upvoteAnswer + answerId;\n  }\n\n  private UpvoteQuestionUrl(questionId: string): string {\n    return this._apiBase + this._upvoteQuestion + questionId;\n  }\n\n  private uploadQuestionUrl(questionId: string): string {\n    return this._apiBase + this._uploadAnswer + questionId;\n  }\n  public getAllUpload() {\n    return this.http.get(this._apiBase + this._listAllUpload);\n  }\n\n  public deleteUploadedAnswer(id: string) {\n    return this.http.get(this._apiBase + this._deleteUploadedAnswer + id);\n  }\n\n\n  public approveUploadedAnswer(id: any) {\n    return this.http.get(this._apiBase + this._approveUploadedAnswer + id);\n  }\n\n  public checkAuth(id: string) {\n    return this.http.get(this._apiBase + this._backEntry + id);\n  }\n\n  public getAllEntries() {\n    return this.http.get(this._apiBase + this._listAllEntries);\n  }\n\n  public getOneRandomEntry() {\n    return this.http.get(this._apiBase + this._getRandomEntry);\n  }\n\n  public uploadAnswer(questionId: string, message: string, authorId: string) {\n    // console.log({message, authorId});\n    return this.http.put(this.uploadQuestionUrl(questionId), {message, authorId});\n  }\n\n  public UpvoteAnswer(answerId: string) {\n    return this.http.get(this.UpVoteAnswerUrl(answerId));\n  }\n\n  public UpvoteQuestion(questionId: string) {\n    return this.http.get(this.UpvoteQuestionUrl(questionId));\n  }\n\n\n}\n","export class Entry {\r\n  constructor() {\r\n    this.question = {\r\n      text: '',\r\n      authorId: '',\r\n      heard: 0,\r\n    };\r\n    this.answers = [\r\n      new Answer()\r\n    ];\r\n  }\r\n  _id: string;\r\n  question: Question;\r\n  answers: Answer[];\r\n}\r\n\r\nexport class Question {\r\n  text: string;\r\n  authorId: string;\r\n  heard: number;\r\n}\r\n\r\nexport class Answer {\r\n  constructor(message = '', authorId = '') {\r\n    this.message = message;\r\n    this.authorId = authorId;\r\n    this.upvote = 0;\r\n    }\r\n\r\n  answerId: string;\r\n  message: string;\r\n  authorId: string;\r\n  upvote: number;\r\n}\r\n\r\nexport class UploadAnswer {\r\n  _id: string;\r\n  questionId: string;\r\n  answer: {\r\n    message: string;\r\n    authorId: string;\r\n    upvote: number;\r\n  };\r\n}\r\n\r\nexport class EntryCollection {\r\n  entries: Entry[];\r\n}\r\n\r\n\r\n","<mat-grid-list cols=\"1\" rowHeight=\"fit\">\n  <mat-grid-tile id=\"question-tile\" rowspan=\"5\">\n    <mat-grid-tile-header color=\"accent\">\n      <span id=\"app-title-span\">\n        <span id=\"app-title-name\">江山娇</span>\n        <span>可以说话</span>\n      <mat-icon id=\"app-title-icon\">speaker_notes</mat-icon>\n      </span></mat-grid-tile-header>\n    <mat-card>\n\n    <mat-card-header>\n\n      <mat-card-title id=\"question-title\">\n        {{ currentEntry.question.text }}\n      </mat-card-title>\n\n      <mat-card-subtitle id=\"question-author\">  {{ this.currentEntry.question.authorId}}</mat-card-subtitle>\n\n    </mat-card-header>\n      <mat-card-actions>\n        <button mat-button (click)=\"IHeardThat()\" id=\"heard-button\"><span id=\"heard-text\">我听过 </span> <span id=\"heardNumber\">{{ this.currentEntry.question.heard}} </span></button>\n      </mat-card-actions>\n    </mat-card>\n<!--    <mat-grid-tile-footer>Footer</mat-grid-tile-footer>-->\n  </mat-grid-tile>\n\n\n  <mat-grid-tile rowspan=\"1\">\n    <button mat-fab id=\"next-answer\" color=\"warn\"  (click)=\"NextQuestion()\" [disabled]=\"loadingEntry || writingAnswer\"><mat-icon>face</mat-icon></button>\n\n  </mat-grid-tile>\n\n\n  <mat-grid-tile *ngIf=\"!writingAnswer; else writingPanel\" id=\"answer-tile\" rowspan=\"4\">\n\n<!--    <mat-grid-tile-header>Header</mat-grid-tile-header>-->\n\n    <button mat-button id=\"left-arrow\" color=\"accent\" (click)=\"LeftArrow()\" [disabled]=\"IsFirstAnswer()\">\n      <mat-icon class=\"arrow-button-icon\">arrow_left</mat-icon>\n    </button>\n\n\n    <mat-card id=\"answer-card\" *ngIf=\"IsThereAnswer(); else noAnswer\">\n\n      <mat-card-header>\n        <mat-card-title id=\"answer-message\">\n      {{ this.currentEntry.answers[this.answerPointer].message }}\n        </mat-card-title>\n        <mat-card-subtitle> {{this.currentEntry.answers[this.answerPointer].authorId}}</mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-actions>\n        <button mat-flat-button disabled id=\"answer-index-button\"> <span id=\"answer-index-current\"> {{ answerPointer + 1 }}</span>  / <span id=\"answer-index-total\"> {{ this.currentEntry.answers.length }} </span></button>\n        <button mat-button (click)=\"IUpVoteThat()\"><span><mat-icon id=\"favorite\">favorite_border</mat-icon> </span> <span id=\"upVoteNumber\">{{ this.currentEntry.answers[this.answerPointer].upvote}} </span></button>\n      </mat-card-actions>\n\n\n    </mat-card>\n\n\n    <ng-template #noAnswer><p id=\"no-answer\">无人回答</p></ng-template>\n\n    <button mat-button id=\"right-arrow\" color=\"accent\" [disabled]=\"IsLastAnswer()\" (click)=\"RightArrow()\">\n      <mat-icon class=\"arrow-button-icon\">arrow_right</mat-icon>\n    </button>\n\n\n<!--    <mat-grid-tile-footer>Footer</mat-grid-tile-footer>-->\n\n  </mat-grid-tile>\n\n\n  <ng-template #writingPanel>\n  <mat-grid-tile id=\"writing-tile\"  rowspan=\"4\">\n\n<!--    <mat-grid-tile-header>Header</mat-grid-tile-header>-->\n\n    <form class=\"input-form\" ngNativeValidate  [formGroup]=\"inputForm\" (ngSubmit)=\"submitHandler()\">\n      <mat-form-field class=\"input-full-width\" id=\"inputText\">\n        <mat-label>我的回答</mat-label>\n        <textarea  required matInput #message maxlength=\"140\" placeholder=\"我想说\" autocomplete=\"off\" cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\"cdkAutosizeMinRows=\"1\" cdkAutosizeMaxRows=\"5\" formControlName=\"message\"></textarea>\n        <mat-hint align=\"start\"><strong></strong> </mat-hint>\n        <mat-hint  align=\"end\">{{message.value.length}} / 140字</mat-hint>\n      </mat-form-field>\n      <br>\n      <mat-form-field class=\"input-full-width\" id=\"inputId\">\n        <mat-label>ID</mat-label>\n        <input matInput #id maxlength=\"20\" autocomplete=\"on\" formControlName=\"authorId\" value=\"匿名\">\n        <mat-hint align=\"start\"><strong></strong> </mat-hint>\n        <mat-hint  align=\"end\">{{id.value.length}} / 20字符</mat-hint>\n      </mat-form-field>\n\n      <button id=\"submit-button\" mat-stroked-button [disabled]=\"this.inputSubmitLoading\">\n        <mat-icon id=\"submit-button-icon\">send</mat-icon>\n      </button>\n\n    </form>\n\n\n<!--    <mat-grid-tile-footer>Footer</mat-grid-tile-footer>-->\n\n  </mat-grid-tile>\n\n  </ng-template>\n\n\n  <mat-grid-tile rowspan=\"1\">\n    <button mat-flat-button id=\"let-me-answer\" color=\"accent\"  (click)=\"LetMeAnswer()\" [disabled]=\"writingAnswer\"><mat-icon>speaker_notes</mat-icon></button>\n    <button mat-flat-button color=\"accent\" (click)=\"ExitWritingMode()\" [disabled]=\"!writingAnswer\"><mat-icon>cancel</mat-icon></button>\n  </mat-grid-tile>\n</mat-grid-list>\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {Answer, Entry} from './entry.model';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {DataService} from '../data.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {Subject, Subscription} from 'rxjs';\nimport {SpeechService} from '../speech.service';\nimport {throttleTime} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  public currentEntry: Entry = new Entry();\n  // public currentAnswer: Answer = new Answer();\n  private preLoadedEntry: Entry;\n  public answerPointer = 0;\n  public writingAnswer = false;\n  public inputForm: FormGroup;\n  public inputSubmitLoading = false;\n\n  public alreadyHeard = false;\n  public alreadyUpvoted = {};\n  public loadingEntry = false;\n  private upvoteSubscription: Subscription;\n  private loadingSubscription: Subscription;\n  // to prevent loading questions too frequently\n  private preLoadQuestionSubject: Subject<any> = new Subject();\n\n  // tslint:disable-next-line:max-line-length\n  private uploadAnswerSubscription: Subscription;\n  private iHeardThatSubscription: Subscription;\n  private preloadingSubscription: Subscription;\n\n  constructor(private fb: FormBuilder,\n              private dataService: DataService,\n              private snackbar: MatSnackBar,\n              private speechService: SpeechService) {\n  }\n\n  ngOnInit(): void {\n    // this.preLoadQuestionSubject.pipe(throttleTime(100)).subscribe(() => {\n    //   this.PreLoadRandomQuestion();\n    // });\n    this.LoadRandomQuestion();\n    // this.PreLoadRandomQuestion()\n    // this.LoadAnswer();\n    this.InitializeQuestion();\n    this.InitializeInputForm();\n\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.preLoadQuestionSubject.unsubscribe();\n  }\n\n  // async uploadAnswer(questionId, message, authorId) {\n  //   this.dataService.uploadAnswer(questionId, message, authorId).subscribe((data) => {\n  //     console.log(data);\n  //   });\n  // }\n\n  async submitHandler() {\n    this.inputSubmitLoading = true;\n    const formValue = this.inputForm.value;\n    try {\n        this.uploadAnswerSubscription = this.dataService.uploadAnswer(this.currentEntry._id, formValue.message, formValue.authorId)\n          .subscribe((data) => {\n        console.log(data);\n        if (data) {\n          this.snackbar.open('你的回答已收录', `稍后更新♥`, {duration: 3000});\n          this.InitializeInputForm();\n          this.ExitWritingMode();\n        } else {\n\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  public setCurrentEntry(entryToUse: Entry): void {\n    if (!this.currentEntry) {\n      this.currentEntry = new Entry();\n    }\n    this.currentEntry = entryToUse;\n  }\n\n\n  IHeardThat() {\n    if (this.alreadyHeard === false) {\n    this.currentEntry.question.heard += 1;\n    this.iHeardThatSubscription = this.dataService.UpvoteQuestion(this.currentEntry._id).subscribe((data) =>\n        console.log(data)\n      );\n    this.alreadyHeard = true;\n    }\n  }\n\n  LetMeAnswer() {\n    this.writingAnswer = true;\n  }\n\n  LeftArrow() {\n    if (this.answerPointer > 0) {\n      this.answerPointer -= 1;\n      // this.LoadAnswer();\n    }\n  }\n\n  RightArrow() {\n    if (this.answerPointer < this.currentEntry.answers.length - 1) {\n      this.answerPointer += 1;\n      // this.LoadAnswer();\n    }\n  }\n\n  IsLastAnswer(): boolean {\n    return (this.answerPointer === this.currentEntry.answers.length - 1) || this.currentEntry.answers.length === 0 ? true : false;\n  }\n\n  IsFirstAnswer(): boolean {\n    return (this.answerPointer === 0) ? true : false;\n  }\n\n  ExitWritingMode(): void {\n    this.writingAnswer = false;\n    this.inputSubmitLoading = false;\n  }\n\n  public IsThereAnswer(): boolean {\n    return this.currentEntry.answers.length === 0 ? false : true;\n  }\n  private InitializeQuestion() {\n    this.alreadyHeard = false;\n    this.ResetAnswerPointer();\n    this.InitializeAnswerUpvote();\n  }\n\n  private InitializeAnswerUpvote() {\n    this.alreadyUpvoted = [];\n  }\n  private ResetAnswerPointer() {\n    this.answerPointer = 0;\n  }\n  private InitializeInputForm() {\n    this.inputForm = this.fb.group({\n      message: '',\n      authorId: '匿名'\n    });\n    this.inputSubmitLoading = false;\n\n  }\n\n  public IUpVoteThat() {\n    if (!this.alreadyUpvoted[this.answerPointer.toString()]) {\n      this.currentEntry.answers[this.answerPointer].upvote += 1;\n      this.upvoteSubscription = this.dataService.UpvoteAnswer(this.currentEntry.answers[this.answerPointer].answerId).subscribe((data) =>\n        console.log(data)\n      );\n      this.alreadyUpvoted[this.answerPointer.toString()] = true;\n    }\n  }\n  public addNewAnswer(message: string, authorId: string) {\n    const newAnswer = new Answer(message, authorId);\n    this.currentEntry.answers.unshift(newAnswer);\n    this.ResetAnswerPointer();\n    // this.LoadAnswer()\n    console.log(this.currentEntry.answers[0].message);\n  }\n\n    public NextQuestion() {\n    // if (this.preLoadedEntry) {\n    //   this.MovePreToCurrentEntry();\n    // }\n    // this.preLoadQuestionSubject.next();\n      this.LoadRandomQuestion();\n      this.InitializeQuestion();\n    this.ResetButtons();\n    }\n\n    private MovePreToCurrentEntry() {\n      this.setCurrentEntry(this.preLoadedEntry);\n      this.preLoadedEntry = null;\n      this.preLoadQuestionSubject.next();\n    }\n\n    private LoadRandomQuestion() {\n      // return this.sampleEntryData.entries[Math.floor(Math.random() * this.sampleEntryData.entries.length)];\n      this.loadingEntry = true;\n      this.speechService.cancelSpeech();\n      this.loadingSubscription = this.dataService.getOneRandomEntry().subscribe((data) => {\n        console.log('Current', data);\n        const entry: Entry = new Entry();\n        Object.assign(entry, data);\n        this.setCurrentEntry(entry);\n        this.speechService.sayQuestion(entry.question.text);\n        this.loadingEntry = false;\n        this.loadingSubscription?.unsubscribe();\n\n      });\n    }\n\n    private PreLoadRandomQuestion() {\n      this.preloadingSubscription = this.dataService.getOneRandomEntry().subscribe((data) => {\n        console.log('Preload', data);\n        const entry: Entry = new Entry();\n        Object.assign(entry, data);\n        this.preLoadedEntry = entry;\n        this.preloadingSubscription?.unsubscribe();\n      });\n    }\n\n    private UnsubscribeAll() {\n      this.upvoteSubscription?.unsubscribe();\n      this.loadingSubscription?.unsubscribe();\n      this.uploadAnswerSubscription?.unsubscribe();\n      this.preloadingSubscription?.unsubscribe();\n    }\n    private ResetButtons() {\n      this.inputSubmitLoading = false;\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpeechService {\n\n  constructor() { }\n\n  public sayQuestion(utterance) {\n    const utteranceInstance = new SpeechSynthesisUtterance(utterance);\n    utteranceInstance.lang = 'zh-Chinese'\n    utteranceInstance.rate = 4;\n    speechSynthesis.speak(utteranceInstance)\n  }\n  public cancelSpeech() {\n    speechSynthesis.cancel()\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}